#image: registry.it.mcgill.ca/lts/murax:latest
image: ruby:2.6.10

variables:
  # make sure that your .gitmodules file is configured to use relative paths!
  GIT_SUBMODULE_STRATEGY: recursive
  POSTGRES_DB: ruby-getting-started_test
  BUNDLE_PATH: /storage/www/murax/shared
  DISABLE_SPRING: 1
  DB_HOST: postgres
  BUNDLE_VERSION: 2.1.4
  RAILS_ENV: test

# Cache gems in between builds
cache:
  paths:
    - vendor/
    - node_modules
    - log
    - /storage/www/murax/shared


stages:
  - lint
  - build
  - rubocop
  - test
  - report
  - development
  - staging
  - production
  - cleanup

.base:
  stage: build
  cache:
    key:
      files:
        - Gemfile.lock
    paths:
      - vendor/bundle
      - node_modules/
    policy: pull
  before_script:
    - ruby -v # Print out ruby version for debugging
    - gem install bundler rubocop rubocop-rails rubocop-performance --no-document
      #- bundle config set path vendor/bundle
      #- bundle install --jobs $(nproc) "${FLAGS[@]}"
.base_deploy:
  variables:
    RAILS_ENV: production
  before_script:
    - export USER="$GITLAB_USER_LOGIN via gitlab"
    - "which ssh-agent || ( apt-get update -y && apt-get install openssh-client git -y )"
    - eval $(ssh-agent -s)
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - git config --global user.email "mutugi.gathuri@mcgill.ca"
    - git config --global user.name "Mutugi Gathuri"
    - gem install capistrano bundler capistrano-bundler capistrano-sidekiq capistrano-npm capistrano-locally capistrano3-puma capistrano-rails capistrano-ssh-doctor capistrano-rvm capistrano-safe-deploy-to --no-document
    #- bundle install

.base_minimal:
  image: alpine:latest
  cache: {}

.base_lint:
  image:
    name: cytopia/awesome-ci


lint:yaml:
  stage: lint
  allow_failure: true
  image:
    name: cytopia/yamllint
    entrypoint: ["/bin/ash", "-c"]
  artifacts:
    name: "$CI_JOB_NAME"
    when: on_failure
    expire_in: 1 days
    paths:
      - public/yamllint.txt
  script:
    - yamllint config/ >> public/yamllint.txt

lint:ruby:
  extends: .base_lint
  stage: lint
  artifacts:
    name: "$CI_JOB_NAME"
    when: on_failure
    expire_in: 1 days
    paths:
      - public/syntax-errors.txt
  script:
    #- file-crlf --path=app/ Disable for now
    - syntax-ruby --text --size --extension=rb --path=app/ >> public/syntax-errors.txt
    - syntax-ruby --text --size --extension=rb --path=config/ >> public/syntax-errors.txt
    - syntax-ruby --text --size --extension=rb --path=lib/ >> public/syntax-errors.txt

build:rubocop:
  extends: .base
  allow_failure: true
  stage: build
  cache:
    policy: pull-push
  only:
    - master
    - develop
  artifacts:
    name: "$CI_JOB_NAME"
    when: on_failure
    expire_in: 1 week
    paths:
      - public/rubocop-results.txt
  script:
    - gem install rubocop-performance --no-document
    - rubocop >> public/rubocop-results.txt

test:bundle_audit:
  extends: .base
  allow_failure: true
  stage: test
  only:
    - master
  script:
    - bundle exec bundle audit check --update


develop_deploy:
  extends: .base_deploy
  stage: development
  cache:
    policy: pull-push
  script:
    - bundle exec cap development deploy
  only:
    - develop
  tags:
    - azure
  artifacts:
    name: "$CI_JOB_NAME-capistrano-log"
    when: on_failure
    expire_in: 1 week
    paths:
      - log/capistrano.log

cleanup:
  stage: cleanup
  script:
    - rm -rf .vault-password
    - rm -rf /root/.ssh
  when: always
  tags:
    - azure
