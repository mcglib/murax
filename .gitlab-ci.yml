# This file is a template, and might need editing before it works on your project.
# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/ruby/tags/
image: "ruby:2.6.9"

#include:
#  - template: Code-Quality.gitlab-ci.yml
# Pick zero or more services to be used on all builds.
# Only needed when using a docker container to run your tests in.
# Check out: http://docs.gitlab.com/ce/ci/docker/using_docker_images.html#what-is-a-service
variables:
  POSTGRES_DB: murax_gitlab
  POSTGRES_USER: murax
  POSTGRES_PASSWORD: "murax"
  RAILS_ENV: test
stages:
  - lint
  - build
  - rubocop
  - test
  - report
  - develop
  - staging
  - deploy
.base:
  stage: build
  cache:
    key:
      files:
        - Gemfile.lock
    paths:
      - apt-cache/
      - vendor/bundle
      - node_modules/
    policy: pull
  before_script:
    - ruby -v # Print out ruby version for debugging
    - gem install bundler rubocop rubocop-rails rubocop-performance --no-document
      #- bundle config set path vendor/bundle
      #- bundle install --jobs $(nproc) "${FLAGS[@]}"
.base_db:
  extends: .base
  services:
    - postgres:latest
    - redis:latest
  variables:
    POSTGRES_DB: murax_gitlab
    POSTGRES_USER: murax
    POSTGRES_PASSWORD: "murax"
    RAILS_ENV: test
    DATABASE_HOST: postgres
    DISABLE_SPRING: 1
    BUNDLE_PATH: vendor/bundle
  before_script:
    - export APT_CACHE_DIR=`pwd`/apt-cache && mkdir -pv $APT_CACHE_DIR
    - apt-get update -qq && apt-get -o dir::cache::archives="$APT_CACHE_DIR" install -yqq nodejs libpq-dev
    - gem install bundler --no-document
    - bundle config set path vendor/bundle
    - bundle install --jobs $(nproc) "${FLAGS[@]}"
    - bundle exec rake db:create db:schema:load --trace
.base_minimal:
  image: alpine:latest
  cache: {}

.base_lint:
  image:
    name: cytopia/awesome-ci

lint:yaml:
  stage: lint
  allow_failure: true
  image:
    name: cytopia/yamllint
    entrypoint: ["/bin/ash", "-c"]
  artifacts:
    name: "$CI_JOB_NAME"
    when: on_failure
    expire_in: 1 days
    paths:
      - public/yamllint.txt
  script:
    - yamllint config/ >> public/yamllint.txt

lint:ruby:
  extends: .base_lint
  stage: lint
  artifacts:
    name: "$CI_JOB_NAME"
    when: on_failure
    expire_in: 1 days
    paths:
      - public/syntax-errors.txt
  script:
    - file-crlf --path=app/
    - syntax-ruby --text --size --extension=rb --path=app/ >> public/syntax-errors.txt
    - syntax-ruby --text --size --extension=rb --path=config/ >> public/syntax-errors.txt
    - syntax-ruby --text --size --extension=rb --path=lib/ >> public/syntax-errors.txt

build:rubocop:
  extends: .base
  allow_failure: true
  stage: build
  cache:
    policy: pull-push
  only:
    - master
    - develop
  artifacts:
    name: "$CI_JOB_NAME"
    when: on_failure
    expire_in: 1 week
    paths:
      - public/rubocop-results.txt
  script:
    - gem install rubocop-performance --no-document
    - rubocop >> public/rubocop-results.txt

test:bundle_audit:
  extends: .base
  allow_failure: true
  stage: test
  only:
    - master
  script:
    - bundle exec bundle audit check --update
