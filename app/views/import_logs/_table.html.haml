#toolbar.select
  %select.form-control
    %option{:value => ""} Export Basic
    %option{:value => "all"} Export All
    %option{:value => "selected"} Export Selected
%table.table.table-striped#import_logs-table{"data-filter-control": "true",
      "data-show-filter": "true",
      "data-show-refresh": "false",
      "data-search": "true",
      "data-smart-display": "true",
      "data-sortable": "true",
      "data-classes": "table table-hover table-no-bordered",
      "data-toolbar": "#toolbar",
      "data-show-columns": "true",
      "data-show-export": "true",
      "data-click-to-select": "true",
      "data-pagination": "true",
      "data-page-list": "[10, 25, 50, 100, 200, All]",
      "data-show-search-clear-button": "true",
      "data-show-footer": "true",
      "data-footer-style": "footerStyle",
      "data-show-export": "true",
      }
  %thead.thead-dark
    %tr
      %th{"data-field": "imported", "data-sortable": "false"} Select
      %th{"data-field": "imported", "data-sortable": "true"} State
      %th{"data-field": "pid", "data-sortable": "true"} PID
      %th{"data-field": "work_id", "data-sortable": "true"} Work ID
      %th{"data-field": "title", "data-sortable": "true"} Title
      %th{"data-field": "work_type", "data-sortable": "true"} Work Type
      %th{"data-field": "updated", "data-sortable": "true"} Imported on
      %th Actions

  %tbody
    - @import_logs.each do |import_log|
      %tr
        %td{}
        %td{}
          - if !import_log.imported?
            %span.badge.danger{}
              %i.glyphicon.glyphicon-remove
          - if import_log.imported?
            %span.badge.success{}
              %i.glyphicon.glyphicon-ok
        %td= import_log.pid
        %td= link_to import_log.work_id, hyrax_thesis_path(import_log.work_id) if import_log.work_id.present?
        %td= import_log.title.present? ? import_log.title.truncate(30) : ""
        %td= import_log.work_type if import_log.work_type.present?
        %td{}
          = l(import_log.updated_at, :format => :long)
        %td
          - if import_log.raw_xml?
            %button.btn.btn-info.btn-sm{"data-target" => "#xmllog-#{import_log.pid}-Modal", "data-toggle" => "modal", "data-pid" => "#{import_log.pid}", :type => "button"} Digitool XML
          - if !import_log.imported?
            %button.btn.btn-info.btn-sm{"data-target" => "#errorlog-#{import_log.pid}-Modal", "data-toggle" => "modal", "data-pid" => "#{import_log.pid}", :type => "button"} Errors
          - if import_log.id.present?
            %button.btn.btn-info.btn-sm{"data-target" => "#importlog-#{import_log.pid}-Modal", "data-toggle" => "modal", "data-pid" => "#{import_log.pid}", :type => "button"} View log
            = link_to "View log", batch_import_log_path(import_log.batch, import_log.id)
        - if import_log.imported?
          %div.xmllog-modal{"role": "dialog", "id": "xmllog-#{import_log.id}"}
            = render partial: "import_logs/xml_modal", locals: {xml: import_log.raw_xml, pid: import_log.pid}
        - if !import_log.imported?
          %div.errorlog-modal{"role": "dialog", "id": "errorlog-#{import_log.id}"}
            = render partial: "import_logs/log_error_modal", locals: {errors: import_log.error, pid: import_log.pid}
        - if import_log.pid.present?
          %div.importlog-modal{"role": "dialog", "id": "importlog-#{import_log.id}"}
            = render partial: "import_logs/import_log_modal", locals: {import_log: import_log, pid: import_log.pid}

- content_for(:javascript) do
  :javascript
    $table = $('#import_logs-table')
    $(document).on('turbolinks:load', function() {
        $table.bootstrapTable();
        $('#toolbar').find('select').change(function () {
              $table.bootstrapTable('destroy').bootstrapTable({
                exportDataType: $(this).val(),
                exportTypes: ['json', 'xml', 'csv', 'txt', 'sql', 'excel', 'pdf'],
                columns: [
                  {
                    field: 'state',
                    checkbox: true,
                    visible: $(this).val() === 'selected'
                  },
                ]
              })
        }).trigger('change')










    });
